import logging
import gspread
import re
import asyncio
import signal
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaInMemoryUpload
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = "8140549776:AAGNFQ32trak1fkCuBxmW5p99rsci3HvC9k"
GOOGLE_SHEET_ID = "1sSKRIPV-d4JLsQ3UL5BO5Xi9UwwFB5DRJumf2KgvKA0"
JSON_PATH = "droporders-8bf97332068b.json"
GOOGLE_DRIVE_FOLDER_ID = "1oncIzcRaMTzdO07gmXJKcn8cG8MdqHch"
ALLOWED_THREAD_ID = 2

scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
    "https://www.googleapis.com/auth/spreadsheets"
]
creds = ServiceAccountCredentials.from_json_keyfile_name(JSON_PATH, scope)
gc = gspread.authorize(creds)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)

HEADER = ["–î–∞—Ç–∞", "–§–æ—Ç–æ", "–†–∞–∑–º–µ—Ä", "–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä", "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑", "–°—Ç–∞—Ç—É—Å", "–¶–µ–Ω–∞"]

MONTHS = {
    "—è–Ω–≤–∞—Ä—è": "01", "—Ñ–µ–≤—Ä–∞–ª—è": "02", "–º–∞—Ä—Ç–∞": "03", "–∞–ø—Ä–µ–ª—è": "04",
    "–º–∞—è": "05", "–∏—é–Ω—è": "06", "–∏—é–ª—è": "07", "–∞–≤–≥—É—Å—Ç–∞": "08",
    "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12"
}

total_messages = 0
processed_messages = 0
skipped_messages = 0
current_row = {}
last_order_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üî• –î–æ–±—Ä—ã–π –¥–µ–Ω—å, —à–µ—Ñ!\n"
        "–Ø —É–∂–µ –∑–¥–µ—Å—å –∏ —Ä–∞–∑–æ–≥—Ä–µ—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞!\n"
        "–í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–∏—ë–º—É –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ‚Äî –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! üöÄ"
    )

def get_or_create_worksheet(sheet_name):
    try:
        worksheet = gc.open_by_key(GOOGLE_SHEET_ID).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        worksheet = gc.open_by_key(GOOGLE_SHEET_ID).add_worksheet(title=sheet_name, rows="1000", cols="10")
        worksheet.append_row(HEADER)
    return worksheet

def parse_date(text):
    match = re.search(r"(\d{1,2})\s([–∞-—è–ê-–Ø]+)", text)
    if match:
        day = match.group(1)
        month_name = match.group(2).lower()
        month_num = MONTHS.get(month_name)
        if month_num:
            return f"{day.zfill(2)}.{month_num}"

    match = re.search(r"–æ—Ç\s+(\d{1,2})\s+([–∞-—è–ê-–Ø]+)", text.lower())
    if match:
        day = match.group(1)
        month_name = match.group(2).lower()
        month_num = MONTHS.get(month_name)
        if month_num:
            return f"{day.zfill(2)}.{month_num}"

    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏: {text}")

async def debug_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if message:
        print(f"\n‚ÄºÔ∏è –ü–æ–π–º–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        print(f"message_id: {message.message_id}")
        print(f"message_thread_id: {message.message_thread_id}")
        print(f"caption: {message.caption}")
        print(f"text: {message.text}")

async def shutdown(app):
    print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß—ë–¢:")
    print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_messages}")
    print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_messages}")
    print("\nüöÄ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL, debug_message))

    loop = asyncio.get_event_loop()

    def handle_stop(*args):
        loop.create_task(shutdown(app))
        app.stop()

    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, handle_stop)

    app.run_polling()
